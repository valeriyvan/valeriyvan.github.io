---
layout: post
title:  "TIL two instances of `UIColor` can't be directly compared"
date:   2019-08-27 19:27:00 +0200
categories: [UIColor]
---
I spent half a day explaining to a colleague why callbacks aren't always better than delegates. To clarify the concept, I created this [gist](https://gist.github.com/valeriyvan/5268d656ececbb666f15c4fc4a60adf1) to summarize the discussion and key differences.

Another interesting discovery: two instances of `UIColor` [can't be directly compared](https://stackoverflow.com/questions/27559937/how-to-compare-colors-in-swift/44246991#44246991). This is because color space needs to be considered. 

[CGColorEqualToColor](https://developer.apple.com/documentation/coregraphics/1455217-cgcolorequaltocolor?language=objc) clearly says:

> Two colors are equal if they share the same color space and numerically equal color components.

```swift
let blackColor = UIColor(red: 0, green: 0, blue: 0, alpha: 1)
blackColor.isEqual(UIColor.black) // false
```

This behavior highlights that simple equality checks donâ€™t work as expected.

Another thing I have learned that [`func getRed(_ red:, green:, blue:, alpha:) -> Bool`](
https://developer.apple.com/documentation/uikit/uicolor/1621919-getred) may not return color components if color isn't compatible with RGB.

It might be a good time to revise the assumption that color components are always in the 0...1 range:

>  On applications linked for iOS 10 or later, the red/green/blue component is specified in an extended range sRGB color space and can have any value. Values between 0.0 and 1.0 are inside the sRGB color gamut. On earlier versions of iOS, the specified value is always between 0.0 and 1.0.
