---
layout: post
title:  "TIL CRDT"
date:   2023-02-20 10:00:00 +0200
categories: [CRDT, Jekyll, tags]
---
TIL about [Conflict-free replicated data type](https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type). There's Swift implementation [CRDT](https://github.com/heckj/CRDT).

Read how to add tag-based navigation to site on Jekyll: [Adding and Displaying Tags on Jekyll Posts](https://www.jflh.ca/2016-01-23-adding-and-displaying-tags-on-jekyll-posts).

TIL [difference between categories and tags in Jekyll](https://stackoverflow.com/questions/8675841/whats-the-difference-between-categories-and-tags-in-jekyll).

Read [Adding post tagging to jekyll's Minima theme](http://www.jasonemiller.org/2020/12/23/tagging-posts-in-jekyll-minima.html). Ended up copying a lot from this Jekyll install. But not yet tagging. Will finish tagging soon.

Since working on PR [[stdlib] Add to Unsafe[Mutable]RawBufferPointer implementation of _custom[Last]IndexOfEquatableElement](https://github.com/apple/swift/pull/63128) I am thinking that fix width integer types in Swift miss initializer repeating byte. It's quite common operation in bit twiddling. And one has to write something like

```swift
let mask = UInt64(0x7f7f_7f7f_7f7f_7f7f)
```

or 

```swift
var mask = UInt64(0)
withUnsafeMutableBytes(of: &mask) {
    _ = $0.initializeMemory(as: UInt8.self, repeating: 0x7f)
}
```

Both compile into one or two assembly instructions when optimization is tirned on. Latter is more condenced but likely to make mistake at quite long literal. Former is longer to write. Former works for any fixed width integer type and the only way to write generic code.

Would be so nice to have initiliser like `let mask = UInt64(repeatingByte byte: 0x7f7f)` for `byte` both
`UInt8` and `Int8`. This could be nice short Swift evolution proposal.
